#!/bin/bash -e

#
#LFSMakePkg
#

###CUT###

if [ X"$THISTTY" = "X" ];then
	export THISTTY=$(tty)
fi

if [ "X$LOCAL" != "X" ];then
	FINDHELPER=./finddepends
	. ./LFSFunctions
else
	. /usr/share/LFSPkg/LFSFunctions
	FINDHELPER=/usr/bin/finddepends
fi

cleanFolderPath ()
{
	local path="$1"
	local cleanpath=""
	local lastwasslash=false

	for ((arg=0;arg<${#path};arg++))
		do
			if [ ${path:$arg:1} != "/" ];then
				cleanpath="${cleanpath}${path:$arg:1}"
				lastwasslash=false
			else
				if [ $lastwasslash = false ];then
					cleanpath="${cleanpath}/"
					lastwasslash=true
				fi
			fi
		done

	if [ ${cleanpath:${#cleanpath}-1:1} = "/" ];then
		echo "$cleanpath"
	else
		echo "${cleanpath}/"
	fi
}

init ()
{
	TMP=${TMP:-/tmp}
	if [ ! -d "$TMP" ];then mkdir -p "$TMP" &>/dev/null||true;fi
	SUFFIX=${SUFFIX:-"LFSPKG"}
	SECTION=${SECTION:-"SYS"}
	BUILD=${BUILD:-1}
	NAME="${NAME:-A_Pkg}"
	VERSION="${VERSION:-0.0.1}"
	OUTPUT=${OUTPUT:-"$TMP"}
	ROOTDIR=${ROOTDIR:-"/"}
	BUILDSCRIPTS=${BUILDSCRIPTS:-"./"}
	EXITONFAIL=${EXITONFAIL:-1}
	CONFIGOPTIONS=${CONFIGOPTIONS:-"--prefix=/usr"}
	NOASKROOT=${NOASKROOT:-0}
	ANSWER=${TMP}/reply$$
	BUILTTARBALL=""
	SELECTEDPKG=""
	CURRENTSTDINSAVE=2
	USESTABLE=${USESTABLE:-1}
	LFSPKGFOLDER=${ROOTDIR}var/lib/lfspkg
	PKGFOLDER=${LFSPKGFOLDER}/packages
	DATABASEFOLDER=${LFSPKGFOLDER}/database
	DATABASE=${DATABASEFOLDER}/db.txt
	SIMPLEUPDATE=${SIMPLEUPDATE:-1}
	RETURNCODE=0
	mkdir -vp "$PKGFOLDER" "$DATABASEFOLDER" ||true
	ROOTDIR=$(cleanFolderPath $ROOTDIR)
	BUILDSCRIPTS=$(cleanFolderPath $BUILDSCRIPTS)

	export ROOTDIR BUILDSCRIPTS
}

savestdin ()
{
	((CURRENTSTDINSAVE++))
	eval "exec $CURRENTSTDINSAVE<&0"
	exec 0<"$THISTTY"
}

restorestdin ()
{
	eval "exec 0<&$CURRENTSTDINSAVE $CURRENTSTDINSAVE<&-"
	((CURRENTSTDINSAVE--))
}

reruninstallscripts ()
{
	local scriptname
	local folder

	if [ $PREINSTALL -eq 1 ];then
		scriptname="preinstall"
	else
		scriptname="postinstall"
	fi

	folder=${1%-?*}
	if [ -e ${PKGFOLDER}/${folder}/${scriptname} ];then
		cp ${PKGFOLDER}/${folder}/${scriptname} ${ROOTDIR}
		pushd ${ROOTDIR}
			./$scriptname
			rm ./$scriptname||true
		popd
	else
		echo "No ${scriptname} found for ${1} :("
	fi
}

listcontents ()
{
	local folder

	if [ "X$1" != "X" ];then
		folder=${1%-?*}
		if [ $LESS -eq 1 ];then
			tar -O -xvf ${PKGFOLDER}/${folder}/${1}.tar.gz 2>/dev/null|less
		else
			tar -O -xvf ${PKGFOLDER}/${folder}/${1}.tar.gz 2>/dev/null
		fi
		return
	fi
}

findfile ()
{
	local found

	find $PKGFOLDER -type f| while read
		do
			found=
			found=$(tar -O -xvf "$REPLY" 2>/dev/null|grep --text -i "$FIND")
			if [ "X$found" != "X" ];then
				echo "$FIND Found in package: $(basename "${REPLY/.tar.gz/}")"
				echo -e "At these locations:\n$found"
			fi
		done
}

selectmultipkg ()
{
	local arraydata array arraycnt dialogdata
	local instruction="$1"
	local nodialogarray pkg cnt

	arraydata=( $(for ((cnt=0;cnt<$OPTCOUNT;cnt++));do ls -1 --quoting-style=shell "$PKGFOLDER"|grep -i ${OPTS[$cnt]};done) )

	if [ ${#arraydata} -eq 0 ];then
		echo "Nothing by that name :("
		return
	fi

	dialogdata=""
	arraycnt=${#arraydata[@]}
	nodialogarray=""
	for (( cnt=0;cnt<$arraycnt;cnt++ ))
		do
			nodialogarray="$nodialogarray ${arraydata[$cnt]%.tar.gz}"
			dialogdata="${dialogdata} \"${arraydata[$cnt]%.tar.gz}\" \"\" off "
		done

	if  type dialog &>/dev/null;then
		echo $dialogdata|xargs dialog  --checklist "What package do you want to $instruction?" 0 100 0 2>$ANSWER
	else
		select pkg in $nodialogarray "EXIT"
			do
				break
			done
		echo $pkg>$ANSWER
	fi

	if [ "X$(cat $ANSWER)" != "X" ];then
		SELECTEDPKG=( $(cat $ANSWER) )
		return
	fi
}

selectsinglepkg ()
{
	local arraydata array arraycnt dialogdata
	local instruction="$1"
	local nodialogarray pkg
	local searchname="$2"
	local transform

	arraydata=$(find "${PKGFOLDER}"/* -type f -exec basename '{}' \;|grep -i $searchname|sort)
	if [ ${#arraydata} -eq 0 ];then
		echo "Nothing by that name :("
		return
	fi

	eval array=( $arraydata )
	dialogdata=""
	arraycnt=${#array[@]}

	if [ $JUSTLIST = 1 ];then
		transform="${array[@]}"
		transform="${transform//'.tar.gz'/}"
		echo -e "${transform// /\\n}"
		return
	fi	

	if ((arraycnt==1));then
		echo ${array[$cnt]%.tar.gz}>$ANSWER
		SELECTEDPKG=${array[$cnt]%.tar.gz}
		return
	fi
	nodialogarray=""
	for (( cnt=0;cnt<$arraycnt;cnt++ ))
		do
			nodialogarray="$nodialogarray ${array[$cnt]%.tar.gz}"
			dialogdata="${dialogdata} \"${array[$cnt]%.tar.gz}\" \"\" off "
		done

	if  type dialog &>/dev/null;then
		echo $dialogdata|xargs dialog --radiolist "What package do you want to $instruction?" 0 100 0 2>$ANSWER
	else
		select pkg in $nodialogarray "CANCEL"
			do
				break
			done
			if [ X"$pkg" = X"CANCEL" ];then return;fi
		echo $pkg>$ANSWER
	fi

	if [ "X$(cat $ANSWER)" != "X" ];then
		SELECTEDPKG=$(cat $ANSWER)
		return
	fi
}

removelfspkg ()
{
	local cnt flag
	local pkgname="$1"
	local pkgfolder
	pkgfolder="$(basename "${pkgname%-?*}")"

	if [ "X$pkgname" != "X" ];then
		flag=true
		while $flag
			do
				flag=false
				while read
					do
						REPLY=${REPLY#.}
						if [ -f "${ROOTDIR}$REPLY" ] || [ -L "${ROOTDIR}$REPLY" ];then
							rm "${ROOTDIR}$REPLY" 2>/dev/null
							echo "Deleted ${ROOTDIR}$REPLY..."
							flag=true
						fi
						if [ -d "${ROOTDIR}$REPLY" ];then
							if rmdir "${ROOTDIR}$REPLY" 2>/dev/null;then
								echo "Deleted ${ROOTDIR}$REPLY..."
								flag=true
							fi
						fi
					done < <(listcontents "$pkgname")
			done
		rm "${PKGFOLDER}/${pkgfolder}/"*
		rmdir "${PKGFOLDER}/${pkgfolder}"
		echo -e "${RED}Un-Installing $pkgname ...${NORMAL}\n" >&2
		oldsimple=$SIMPLEUPDATE
		SIMPLEUPDATE=1
		updatedatabase
		SIMPLEUPDATE=$oldsimple
	else
		exit 0
	fi
}

doinstall ()
{
	local pkgpath="$1"
	local pkgname
	local callingfolder
	local oldsimple

	pkgfolder="$(basename "${pkgpath%-?*}")"
	pkgname="$(basename "${pkgpath/.tar.gz/}")"

	pushd "$ROOTDIR"
		tar --keep-directory-symlink  -xpf "$1" ./preinstall &>/dev/null||true
		
		if [ -e ./preinstall ];then
			savestdin
				./preinstall
			restorestdin
		fi

		tar --keep-directory-symlink  -xvpf "$1"

		if [ -e ./postinstall ];then
			savestdin
				./postinstall
			restorestdin
		fi

#database
		pushd "${PKGFOLDER}"
			mkdir "$pkgfolder" &>/dev/null||true
			cd "$pkgfolder"
			:>"$pkgname"
			tar --list -f "${pkgpath}" >  "$pkgname"
			sed -i -r '/^\.\/preinstall$/d;/^\.\/postinstall$/d;/^\.\/info$/d;/^\.\/$/d' "$pkgname"
			tar -czvf "${pkgname}.tar.gz" "$pkgname"
			rm "$pkgname"
			mv $ROOTDIR/preinstall . &>/dev/null||true
			mv $ROOTDIR/postinstall . &>/dev/null||true
			mv $ROOTDIR/info . &>/dev/null||true
		popd
		echo -e "${GREEN}Installing $pkgname ...${NORMAL}\n" >&2
		oldsimple=$SIMPLEUPDATE
		SIMPLEUPDATE=1
		updatedatabase ||true
		SIMPLEUPDATE=$oldsimple
	popd
}

installlfspkg ()
{
	if [ "X$BUILTTARBALL" != "X" ];then
		doinstall "$BUILTTARBALL"
		return
	fi

	for ((cnt=0;cnt<$OPTCOUNT;cnt++))
		do
			doinstall "${OPTS[$cnt]}"
		done
	return
}

makelfspkg ()
{
	local tarfile="${OUTPUT}/${SECTION}/${NAME}-${PKGVERSION}-${BUILD}_${SECTION}_${SUFFIX}.tar.gz"

	mkdir -vp "${OUTPUT}/${SECTION}" 2>/dev/null||true

	tar -cvzf "$tarfile" .
	echo "Package ${NAME}-${PKGVERSION} has been built here:$tarfile"
	BUILTTARBALL="$tarfile"
	return
}

updatelfspkg ()
{
	local searchname="${OPTS[0]}"
	local newpkg="${OPTS[1]}"
	local installedname="$(basename ${newpkg} .tar.gz)"

	selectsinglepkg "update" "$searchname"
	removelfspkg "$SELECTEDPKG"
	doinstall "$newpkg"
}

maketemplate ()
{
	local pkgpath pkgname pkgdir
	local lfsname lfsversion
	local suffix
	local upperdir
	local infodata

	for pkgpath in ${OPTS[@]}
		do
			pkgname="$(basename "${pkgpath/.tar.*/}")"
			pkgdir="$(dirname "${pkgpath/.tar.*/}")"
			lfsname=${pkgname%-?*}
			lfsversion=${pkgname##?*-}
			if [ "X$pkgpath" = "X$pkgname" ];then
				suffix=".${pkgpath##*.}"
			else
				suffix=$(basename ${pkgpath/"${pkgname}"/})
			fi
			upperdir="$(echo "$(basename "$(pwd)")"|tr a-z A-Z)"
			mkdir $lfsname||true
			echo -e "#!/bin/bash\n#©$USER $(date)\n\n. /usr/share/LFSPkg/LFSFunctions\n">${lfsname}/preinstall
			echo -e "#!/bin/bash\n#©$USER $(date)\n\n. /usr/share/LFSPkg/LFSFunctions\n">${lfsname}/postinstall
			infodata=$(makepkginfo ${lfsname}||true)
			if [ "X$infodata" != X ];then
				echo $infodata > ${lfsname}/info
			fi
			cat >"${lfsname}/$lfsname.LFSBuild"<< EOF
#!/bin/bash -e

. /usr/share/LFSPkg/LFSFunctions

DEPENDS=""
if ! lfspkg -B "\$DEPENDS";then
	exit 100
fi

PKGNAME="$lfsname"
TARNAME="\$PKGNAME"
VERSION="$lfsversion"
BUILD=1
SECTION="$upperdir"
SUFFIX="LFSPKG"
TARBALL="\${TARNAME}-\${VERSION}${suffix}"

scriptLog "\${PKGNAME}-\${VERSION}"
gettar "${pkgdir}/\${TARBALL}" \$SECTION

PKG="\${OUTPUT}/\${PKGNAME}"

DOWHAT=\${1:-"build"}
rm -rf "\$PKG" || true
mkdir -p "\$PKG"
tar -xvf "\${SOURCEARCHIVES}/\${SECTION}/\${TARBALL}"

pushd "\${TARNAME}-\${VERSION}"
EOF
			if [ $TEMPLATE -eq 1 ];then
				cat >>"${lfsname}/$lfsname.LFSBuild"<< EOF
	CFLAGS="\$LFSFLAGS" CXXFLAGS="\$LFSFLAGS" ./configure \${CONFIGOPTIONS}
	make \$MAKEFLAGS||make|| exit 1
	make install DESTDIR=\$PKG || exit 1
EOF
			else
				cat >>"${lfsname}/$lfsname.LFSBuild"<< EOF
	mkdir build||true
	cd  build
	cmake \$CMAKEINSTALLPREFIX \$CMAKELIBDIRSUFFIX \$CMAKEUSEQT5 \$CMAKEPREFIXPATH ..
	make \$MAKEFLAGS||make|| exit 1
	make install DESTDIR=\$PKG || exit 1
EOF
			fi

			cat >>"${lfsname}/$lfsname.LFSBuild"<< EOF
popd

checketc "\$PKG"
packageclean "\$PKG"

cp ./preinstall ./postinstall ./info "\$PKG" &>/dev/null || true
pushd "\$PKG"
	/usr/bin/lfspkg -n "\$PKGNAME" -p "\$VERSION" -d \$SECTION -b \$BUILD -s \$SUFFIX -m
popd

case \$DOWHAT in
	up*)
		lfspkg "^\${PKGNAME}-[0-9][0-9]*" "\${OUTPUT}/\${SECTION}/\${PKGNAME}-\${VERSION}-\${BUILD}_\${SECTION}_\${SUFFIX}.tar.gz" -u
		;;
	"install")
		lfspkg "\${OUTPUT}/\${SECTION}/\${PKGNAME}-\${VERSION}-\${BUILD}_\${SECTION}_\${SUFFIX}.tar.gz" -i
		;;
	"build")
		echo "Just built"
		;;
	*)
		echo "*** Unknown command ***"
		exit 1
esac

rm -r "\$PKG" "\${TARNAME}-\${VERSION}"
EOF
			chmod +x "${lfsname}/$lfsname.LFSBuild"	
			chmod +x "${lfsname}/preinstall"	
			chmod +x "${lfsname}/postinstall"	
		done
}

listlfspkg ()
{
	selectsinglepkg "list" "${OPTS[0]}"
	listcontents "$SELECTEDPKG"
}

remakepkg ()
{
	local filetype buidtmp filedir filename fromfile
	local folder

	selectsinglepkg "list" "${OPTS[0]}"

	buildtmp="/tmp/remake$$"
	mkdir -p $buildtmp
	folder=${SELECTEDPKG%-?*}

	if [ -e ${PKGFOLDER}/${folder}/preinstall ];then
		cp ${PKGFOLDER}/${folder}/preinstall ${ROOTDIR}preinstall
	fi

	if [ -e ${PKGFOLDER}/${folder}/postinstall ];then
		cp ${PKGFOLDER}/${folder}/postinstall ${ROOTDIR}postinstall
	fi

	while read
		do
			fromfile="${REPLY/./}"
			filename=$(basename "$fromfile")
			filedir=$(dirname "$fromfile")
			filetype=$(stat ${ROOTDIR}"$fromfile" --format="%F")
			echo "Adding ${ROOTDIR}$fromfile ..."
			case $filetype in

				"directory")
					mkdir -p "$buildtmp/$filedir"
					;;
				*)
					#should be irellevent
					mkdir -p "$buildtmp/$filedir"
					cp -pP ${ROOTDIR}"$fromfile" "$buildtmp/$filedir"
					;;
			esac
		done < <(listcontents "$SELECTEDPKG")

	pushd $buildtmp
		tar -cvzf "/tmp/${SELECTEDPKG}.tar.gz" .
	popd

	rm -rf "$buildtmp"
	if [ -e ${ROOTDIR}preinstall ];then
		rm ${ROOTDIR}preinstall
	fi

	if [ -e ${ROOTDIR}postinstall ];then
		rm ${ROOTDIR}postinstall
	fi
}

builddeps()
{
	local what=""

	if [ X"$NODEPS" != "X" ];then return;fi

	while read SCRIPT
		do
			if [ "X$SCRIPT" != "X" ];then
				if [ "X${SCRIPT:7:5}" = "XERROR" ];then
					echo $SCRIPT
					echo -e "${RED}ABORTING !!!${NORMAL}"
					exit 100
				fi
				pushd "$(dirname "$SCRIPT")"
					savestdin
						what=${SCRIPT##?* }
						if ! NODEPS=true ./$(basename $SCRIPT) $what;then
							echo -e "${RED}Build error with $SCRIPT...${NORMAL}"
							restorestdin
							exit -1
						fi
					restorestdin
				popd
			fi
		done < <($FINDHELPER ${BUILDSCRIPTS} ${ROOTDIR} B "$BUILDDEPS")
}

updatedatabase ()
{
	mkdir -vp "$PKGFOLDER" "$DATABASEFOLDER" &>/dev/null||true
	if [ $SIMPLEUPDATE -eq 0 ];then
		pushd "${DATABASEFOLDER}" &>/dev/null
			rm *.html *.gz *.info *-info *.txt||true
			echo -e "${GREEN}Getting index pages from (B)LFS...${NORMAL}" 1>&2
			wget http://www.linuxfromscratch.org/blfs/view/stable/longindex.html -O blfsindex1.html
			wget http://www.linuxfromscratch.org/lfs/view/stable/longindex.html -O lfsindex1.html
			wget http://www.linuxfromscratch.org/blfs/view/svn/longindex.html -O blfsindex0.html
			wget http://www.linuxfromscratch.org/lfs/view/development/longindex.html -O lfsindex0.html
			for vers in "14.2" "14.1" "14.0" "13.37" "13.1"
				do
					echo -e "${GREEN}Getting index pages from Slackbuilds $vers ...${NORMAL}" 1>&2
					wget -c http://slackbuilds.org/slackbuilds/${vers}/SLACKBUILDS.TXT.gz -O ${vers}.txt.gz
					gunzip -c ${vers}.txt.gz > ${vers}.txt
					rm ${vers}.txt.gz
				done
		popd &>/dev/null
	fi
	$FINDHELPER "${BUILDSCRIPTS}" "${ROOTDIR}" L> "${DATABASE}"
}

finddependants ()
{
	local dep="$1"
	local name
	local version
	local pathtoscript
	local matches

	readarray matches < <(grep -sni "\b${dep}\b-[0-9].*" "$DATABASE"|awk -F ':' '{print $1}')
	echo -e "${BLUE}Dependencies for ${GREEN}${dep}${NORMAL}:" >&2
	for j in ${matches[@]}
		do
			name=$(sed -n "$((j-3))p" "$DATABASE"|awk -F= '{print $2}')
			version=$(sed -n "$((j-2))p" "$DATABASE"|awk -F= '{print $2}')
			pathtoscript=$(sed -n "$((j-1))p" "$DATABASE"|awk -F= '{print $2}')
			echo "${name}-${version} - $(cleanFolderPath "${ROOTDIR}$pathtoscript")"
		done
}

main ()
{
	local defaultdata

	if [ $NOCOLOUR -eq 1 ];then
		RED=""
		GREEN=""
		BLACK=""
		NORMAL=""
		BLUE=""
	fi

	if [ X"$FINDDEPENDS" != "X" ];then
		$FINDHELPER ${BUILDSCRIPTS} ${ROOTDIR} D "$FINDDEPENDS"
		return
	fi

	if [ X"$BUILDDEPS" != "X" ];then
		builddeps "$BUILDDEPS"
		return
	fi

	if [ $REMAKE -eq 1 ];then
		remakepkg
		return
	fi

	if [ "X$FIND" != "X" ];then
		findfile
		return
	fi

	if [ "X$INFO" != "X" ];then
		makepkginfo "$INFO"
		return
	fi

	if [ "X$WEBPAGE" != "X" ];then
		showwebpage "$WEBPAGE"
		return
	fi

	if [ "$PKGINFO" -eq 1 ];then
		selectsinglepkg "see the info for" "${OPTS[0]}"
		if ! cat ${PKGFOLDER}/${SELECTEDPKG%-?*}/info 2>/dev/null;then
			echo "No info available ... :("
		fi
		return
	fi

	if [ $MAKE -eq 1 ];then
		makelfspkg
		return
	fi

	if [ $LIST -eq 1 ];then
		listlfspkg
		return
	fi

	if [ $INSTALL -eq 1 ];then
		installlfspkg
		return
	fi

	if [ $COMMIT -eq 1 ];then
		makelfspkg
		installlfspkg
		return
	fi

	if [ $REMOVE -eq 1 ];then
		if [ $OPTCOUNT -eq 1 ];then
			selectsinglepkg "remove" "${OPTS[0]}"
			removelfspkg "$SELECTEDPKG"
		else
			selectmultipkg "remove"
			for ((cnt=0;cnt<${#SELECTEDPKG[@]};cnt++))
				do
					removelfspkg "${SELECTEDPKG[$cnt]//\"/}"
				done
		fi
		return
	fi

	if [ $UPGRADE -eq 1 ];then
		if [ $OPTCOUNT -eq 2 ] && [ -e "${OPTS[1]}" ];then
			updatelfspkg
		else
			echo "Must supply update file"
		fi
		return
	fi

	if [ $TEMPLATE -eq 1 ] || [ $QTTEMPLATE -eq 1 ];then
		maketemplate
		return
	fi

	if [ $PREINSTALL -eq 1 ] || [ $POSTINSTALL -eq 1 ];then
		if [ $OPTCOUNT -eq 1 ];then
			selectsinglepkg "re-run the pre/post install scripts for" "${OPTS[0]}"
			reruninstallscripts "$SELECTEDPKG"
		fi
		return
	fi

	if [ $CHECK -eq 1 ];then
		checkforversion
		return
	fi

	if [ $REBUILD -eq 1 ];then
		updatedatabase
		return
	fi

	if [ $NOTINSTALLED -eq 1 ];then
		$FINDHELPER ${BUILDSCRIPTS} ${ROOTDIR} U
		return
	fi

	if [ $INSTALLED -eq 1 ];then
		$FINDHELPER ${BUILDSCRIPTS} ${ROOTDIR} I
		return
	fi

	if [ $DEPENDSON -eq 1 ];then
		finddependants ${OPTS[0]}
		return
	fi

	if [ $CHECKALL -eq 1 ];then
		cat $DATABASE |grep -i name|awk -F= '{print $2}'|xargs -I '{}' lfspkg -C '{}'
		return
	fi

	if [ $SEARCH -eq 1 ];then
		if [ ! -e "$DATABASE" ];then
			lfspkg -U
		fi

		if [ $OPTCOUNT -eq 1 ];then
			defaultdata=0
		else
			defaultdata=${OPTS[1]}
		fi

		if [ $defaultdata -eq 0 ];then
			sed -n "/^Package name=${OPTS[0]}$/I,/Installed version=/p" "$DATABASE"
		else
			sed -n "/^Package name=${OPTS[0]}$/I,/Installed version=/p" "$DATABASE"|sed -n "${defaultdata}p"|awk -F= '{print $2}'
		fi
		return
	fi

	for ((cnt=0;cnt<OPTCOUNT;cnt++))
		do
			found=( $(find "${PKGFOLDER}"/* -type f -exec basename '{}' \;|grep -i "${OPTS[cnt]}") )
			echo "Matches for:${OPTS[cnt]}"
			for name in ${found[@]}
				do
					echo ${name/.tar.gz/}
				done
			echo
		done
	if [ ${#found[@]} -eq 0 ];then
		RETURNCODE=1
	fi
	
	return $RETURNCODE
} 

checkforoot ()
{
	if [ $INSTALL -eq 1 ] || [ $REMOVE -eq 1 ] || [ $UPGRADE -eq 1 ] || [ $COMMIT -eq 1 ] || [ $PREINSTALL -eq 1 ] || [ $POSTINSTALL -eq 1 ];then
		if [ $UID -ne 0 ];then
			echo "You need to be ROOT to make file system changes ..."
			exit 1
		fi
	fi
}

lfspkgargs "$@"
set -- "${OPTS[@]}"

init
if [ $NOASKROOT -eq 0 ];then
	checkforoot
fi
main
rm $ANSWER &>/dev/null
exit $RETURNCODE

